% -*- mode: LaTeX; -*- 
\chapter{Advanced topics}
\label{chap:b:advanced}

This chapters presents advanced topics for programming branchers
as implementations of branchings.

\paragraph{Overview.}

\autoref{sec:b:advanced:assign} presents a specialized brancher
for assigning views rather than branching on them. How branchers
support no-goods is discussed in \autoref{sec:b:advanced:nogoods}.
Variable views for branchers are discussed in
\autoref{sec:b:advanced:views}.


\section{Assignment branchers}
\label{sec:b:advanced:assign}

This section presents an example for a brancher that assigns all
of its views rather than branches on its views.  The branching
\begin{code}
void assignmin(Home home, const IntVarArgs& x);
\end{code}
assigns all variables in \?x? to their smallest possible
value. That is, \?assignmin? is equivalent to the predefined
branching (see \autoref{sec:m:branch:assign}) used as
\begin{code}
assign(home, x, INT_ASSIGN_MIN());
\end{code}

\begin{figure}
\insertlitcode{assign min}
\caption{A brancher for \?assignmin?}
\label{fig:b:advanced:assignmin}
\end{figure}

\autoref{fig:b:advanced:assignmin} shows the relevant parts of the
brancher \?AssignMin?. Unsurprisingly, both the \?status()? and
\?choice()? function are identical to those shown in
\autoref{fig:b:started:improved} (and hence are omitted). 

The changes concern the created choice of type \?PosVal?: the
constructor now initializes a choice with a single alternative
only (the second argument to the call of the constructor
\?Choice?). The \?commit()? function is a specialized version of
the \?commit()? function defined in
\autoref{fig:b:started:improved}. It only needs to be capable of
handling a single alternative. The same holds true for the
\?print()? function.


\section{Supporting no-goods}
\label{sec:b:advanced:nogoods}

Supporting no-goods by a brancher is quite simple: every brancher
has a virtual member function \?ngl()? (for no-good literal) that
takes the same argument as the \?commit()? member function: a
space, a choice, and the number of an alternative and returns a
pointer to a no-good literal of class \gecoderef[class]{NGL}. The
\?ngl()?  function is called during no-good generation (see
\autoref{sec:m:search:nogoods}) and the returned no-good literal
is then used by a propagator that propagates the no-goods (if you
are curious, the propagator is implemented by
\gecoderef[class]{Search::Meta::NoGoodsProp}).

\begin{figure}
\insertlitcode{none min with no-good support}
\caption{Branching for \?nonemin? with no-good support}
\label{fig:b:advanced:nogoods}
\end{figure}

By default, the \?ngl()? function of a brancher returns \?NULL?
which means that the brancher does not support no-goods. In order
to support no-goods, a brancher must redefine the \?ngl()?
function and must define a class for the no-good literals to be
returned. The class \?EqNGL? implementing a no-good literal for
equality and the \?ngl()? function is shown in
\autoref{fig:b:advanced:nogoods}. Otherwise, the brancher is the
same as the \?nonemin? brancher shown in
\autoref{fig:b:started:improved}.

\subsection{Returning a no-good literal}

The \?ngl()? function of a brancher has the following options
when returning a no-good literal:
\begin{enumerate}
\item As argued above, it can always return \?NULL? and hence
  does not support no-goods.
\item It returns for each alternative of a choice a no-good
  literal. For our \?NoneMin? brancher this would entail that
  when \?ngl(home,c,0)? is called, it returns a no-good
  literal implementing equality between a view and an integer
  that corresponds to the first alternative (for a given
  space \?home? and a choice \?c?).

  For the second alternative \?ngl(home,c,1)? a no-good literal
  implementing disequality should be returned. This would work,
  but the brancher can do better than that.
\item When \?ngl(home,c,a)? is called for an alternative
  where $\mathtt{a}>0$ with a space \?home? and a choice \?c? and
  \?a? is the last alternative (for \?NoneMin?,
  $\mathtt{a}=\mathtt{1}$) and the last alternative is the
  logical negation of all other alternatives, then the \?ngl()?
  function can return \?NULL?.

  Assume that the alternatives of a choice are
  $$\mathtt{l}_0\vee\ldots\vee\mathtt{l}_{\mathtt{n}-1}$$ 
  where
  \?n? is the arity of the choice and it holds that
  $$(\mathtt{l}_0\vee\ldots\vee\mathtt{l}_{\mathtt{n}-2})\Leftrightarrow \neg\mathtt{l}_{\mathtt{n}-1}$$
  is true, then the \?ngl()? can return \?NULL? for the last alternative
  (that is, $\mathtt{n}-1$).

  Note that this optimization implements the very same idea as
  discussed at the beginning of \autoref{sec:m:search:nogoods}.
  Note also that this property is typically only true for binary
  branchers such as in our example.
\end{enumerate}

\begin{samepage}
In our example, we are lucky as the second alternative is indeed
always the negation of the first alternative. Hence the following
\?ngl()? function implements no-good literal creation and only
requires a single class \?EqNGL? for no-good literals
implementing equality:
\insertlitcode{none min with no-good support:no-good literal creation}
\end{samepage}

\subsection{Implementing a no-good literal}

\insertlitcode{none min with no-good support:status}

\insertlitcode{none min with no-good support:prune}

\insertlitcode{none min with no-good support:subscribe and cancel}



\section{Using variable views}
\label{sec:b:advanced:views}

Variable views can also be used for reusing branchers to obtain
several branchings, similar to reusing propagators for several
constraints, see \autoref{chap:p:views}.

While in principle all different variable views introduced in
\autoref{chap:p:views} can be used for branchers, the only
meaningful variable view for branchers is the minus integer view
(see \autoref{sec:p:views:int:minus}).

\begin{figure}
\insertlitcode{none min and none max}
\caption{Branchings for \?nonemin? and \?nonemax?}
\label{fig:b:advanced:views}
\end{figure}

As an example consider the branchings
\?nonemin? (see \autoref{sec:b:started:nonemin}) and \?nonemax?
where the latter tries to assign the maximal value of a view
first. The corresponding program fragment is shown in
\autoref{fig:b:advanced:views}. The class \?NoneMin? is made
generic with respect to the type of view it uses. Then, both
\?nonemin? and \?nonemax? can be obtained by instantiating
\?NoneMin? with integer views or integer minus views.



\begin{litcode}{assign min}{schulte}
\begin{litblock}{anonymous}
#include <gecode/int.hh>

using namespace Gecode;

\end{litblock}
class AssignMin : public Brancher {
  \begin{litblock}{anonymous}
protected:
  ViewArray<Int::IntView> x;
  mutable int start;
  \end{litblock}
  class PosVal : public Choice {
  public:
    int pos; int val;
    PosVal(const AssignMin& b, int p, int v)
      : Choice(b,1), pos(p), val(v) {}
    \begin{litblock}{anonymous}
    virtual size_t size(void) const {
      return sizeof(*this);
    }
    virtual void archive(Archive& e) const {
      Choice::archive(e);
      e << pos << val;
    }
    \end{litblock}
  };
  \begin{litblock}{anonymous}
public:
  AssignMin(Home home, ViewArray<Int::IntView>& x0)
    : Brancher(home), x(x0), start(0) {}
  static void post(Home home, ViewArray<Int::IntView>& x) {
    (void) new (home) AssignMin(home,x);
  }
  virtual size_t dispose(Space& home) {
    (void) Brancher::dispose(home);
    return sizeof(*this);
  }
  AssignMin(Space& home, bool share, AssignMin& b)
    : Brancher(home,share,b), start(b.start) {
    x.update(home,share,b.x);
  }
  virtual Brancher* copy(Space& home, bool share) {
    return new (home) AssignMin(home,share,*this);
  }
  virtual bool status(const Space& home) const {
    for (int i=start; i<x.size(); i++)
      if (!x[i].assigned()) {
        start = i; return true;
      }
    return false;
  }
  virtual Choice* choice(Space& home) {
    return new PosVal(*this,start,x[start].min());
  }
  virtual Choice* choice(const Space&, Archive& e) {
    int pos, val;
    e >> pos >> val;
    return new PosVal(*this, pos, val);
  }
  \end{litblock}
  virtual ExecStatus commit(Space& home, 
                            const Choice& c,
                            unsigned int a) {
    const PosVal& pv = static_cast<const PosVal&>(c);
    int pos=pv.pos, val=pv.val;
    return me_failed(x[pos].eq(home,val)) ? ES_FAILED : ES_OK;
  }
  \begin{litblock}{anonymous}
  virtual void print(const Space& home, const Choice& c,
                     unsigned int a,
                     std::ostream& o) const {
    const PosVal& pv = static_cast<const PosVal&>(c);
    int pos=pv.pos, val=pv.val;
    o << "x[" << pos << "] = " << val;
  }
  \end{litblock}
};
\begin{litblock}{anonymous}

void assignmin(Home home, const IntVarArgs& x) {
  if (home.failed()) return;
  ViewArray<Int::IntView> y(home,x);
  AssignMin::post(home,y);
}
\end{litblock}
\end{litcode}


\begin{litcode}{none min and none max}{schulte}
\begin{litblock}{anonymous}
#include <gecode/int.hh>

using namespace Gecode;

\end{litblock}
template<class View>
class NoneMin : public Brancher {
  \begin{litblock}{anonymous}
protected:
  ViewArray<View> x;
  mutable int start;
  class PosVal : public Choice {
  public:
    int pos; int val;
    PosVal(const NoneMin& b, int p, int v)
      : Choice(b,2), pos(p), val(v) {}
    virtual size_t size(void) const {
      return sizeof(*this);
    }
    virtual void archive(Archive& e) const {
      Choice::archive(e);
      e << pos << val;
    }
  };
public:
  NoneMin(Home home, ViewArray<View>& x0)
    : Brancher(home), x(x0), start(0) {}
  static void post(Home home, ViewArray<View>& x) {
    (void) new (home) NoneMin<View>(home,x);
  }
  virtual size_t dispose(Space& home) {
    (void) Brancher::dispose(home);
    return sizeof(*this);
  }
  NoneMin(Space& home, bool share, NoneMin& b)
    : Brancher(home,share,b), start(b.start) {
    x.update(home,share,b.x);
  }
  virtual Brancher* copy(Space& home, bool share) {
    return new (home) NoneMin<View>(home,share,*this);
  }
  virtual bool status(const Space& home) const {
    for (int i=start; i<x.size(); i++)
      if (!x[i].assigned()) {
        start = i; return true;
      }
    return false;
  }
  virtual Choice* choice(Space& home) {
    return new PosVal(*this,start,x[start].min());
  }
  virtual Choice* choice(const Space&, Archive& e) {
    int pos, val;
    e >> pos >> val;
    return new PosVal(*this, pos, val);
  }
  virtual ExecStatus commit(Space& home, 
                            const Choice& c,
                            unsigned int a) {
    const PosVal& pv = static_cast<const PosVal&>(c);
    int pos=pv.pos, val=pv.val;
    if (a == 0)
      return me_failed(x[pos].eq(home,val)) ? ES_FAILED : ES_OK;
    else
      return me_failed(x[pos].nq(home,val)) ? ES_FAILED : ES_OK;
  }
  virtual void print(const Space& home, const Choice& c,
                     unsigned int a,
                     std::ostream& o) const {
    const PosVal& pv = static_cast<const PosVal&>(c);
    int pos=pv.pos, val=pv.val;
    if (a == 0)
      o << "x[" << pos << "] = " << val;
    else
      o << "x[" << pos << "] != " << val;
  }
  \end{litblock}
};
void nonemin(Home home, const IntVarArgs& x) {
  \begin{litblock}{anonymous}
  if (home.failed()) return;
  ViewArray<Int::IntView> y(home,x);
  NoneMin<Int::IntView>::post(home,y);
  \end{litblock}
}
void nonemax(Home home, const IntVarArgs& x) {
  if (home.failed()) return;
  ViewArray<Int::MinusView> y(home,x.size());
  for (int i=x.size(); i--; )
    y[i]=Int::MinusView(x[i]);
  NoneMin<Int::MinusView>::post(home,y);
}
\end{litcode}


\begin{litcode}{none min with no-good support}{schulte}
\begin{litblock}{anonymous}
#include <gecode/int.hh>

using namespace Gecode;

\end{litblock}
class EqNGL : public NGL {
protected:
  Int::IntView x; int n;
public:
  EqNGL(Space& home, Int::IntView x0, int n0)
    : NGL(home), x(x0), n(n0) {}
  EqNGL(Space& home, bool share, EqNGL& ngl)
    : NGL(home, share, ngl), n(ngl.n) {
    x.update(home, share, ngl.x);
  }
  \begin{litblock}{status}
  virtual NGL::Status status(const Space& home) const {
    if (x.assigned())
      return (x.val() == n) ? NGL::SUBSUMED : NGL::FAILED;
    else 
      return x.in(n) ? NGL::NONE : NGL::FAILED;
  }
  \end{litblock}
  \begin{litblock}{prune}
  virtual ExecStatus prune(Space& home) {
    return me_failed(x.nq(home,n)) ? ES_FAILED : ES_OK;
  }
  \end{litblock}
  \begin{litblock}{subscribe and cancel}
  virtual void subscribe(Space& home, Propagator& p) {
    x.subscribe(home, p, Int::PC_INT_VAL);
  }
  virtual void cancel(Space& home, Propagator& p) {
    x.cancel(home, p, Int::PC_INT_VAL);
  }
  \end{litblock}
  virtual NGL* copy(Space& home, bool share) {
    return new (home) EqNGL(home, share, *this);
  }
  virtual size_t dispose(Space& home) {
    (void) NGL::dispose(home);
    return sizeof(*this);
  }
};

class NoneMin : public Brancher {
  \begin{litblock}{anonymous}
protected:
  ViewArray<Int::IntView> x;
  mutable int start;
  class PosVal : public Choice {
  public:
    int pos; int val;
    PosVal(const NoneMin& b, int p, int v)
      : Choice(b,2), pos(p), val(v) {}
    virtual size_t size(void) const {
      return sizeof(*this);
    }
    virtual void archive(Archive& e) const {
      Choice::archive(e);
      e << pos << val;
    }
  };
  \end{litblock}
public:
  \begin{litblock}{anonymous}
  NoneMin(Home home, ViewArray<Int::IntView>& x0)
    : Brancher(home), x(x0), start(0) {}
  static void post(Home home, ViewArray<Int::IntView>& x) {
    (void) new (home) NoneMin(home,x);
  }
  virtual size_t dispose(Space& home) {
    (void) Brancher::dispose(home);
    return sizeof(*this);
  }
  NoneMin(Space& home, bool share, NoneMin& b)
    : Brancher(home,share,b), start(b.start) {
    x.update(home,share,b.x);
  }
  virtual Brancher* copy(Space& home, bool share) {
    return new (home) NoneMin(home,share,*this);
  }
  virtual bool status(const Space& home) const {
    for (int i=start; i<x.size(); i++)
      if (!x[i].assigned()) {
        start = i; return true;
      }
    return false;
  }
  virtual Choice* choice(Space& home) {
    return new PosVal(*this,start,x[start].min());
  }
  virtual Choice* choice(const Space&, Archive& e) {
    int pos, val;
    e >> pos >> val;
    return new PosVal(*this, pos, val);
  }
  virtual ExecStatus commit(Space& home, 
                            const Choice& c,
                            unsigned int a) {
    const PosVal& pv = static_cast<const PosVal&>(c);
    int pos=pv.pos, val=pv.val;
    if (a == 0)
      return me_failed(x[pos].eq(home,val)) ? ES_FAILED : ES_OK;
    else
      return me_failed(x[pos].nq(home,val)) ? ES_FAILED : ES_OK;
  }
  virtual void print(const Space& home, const Choice& c,
                     unsigned int a,
                     std::ostream& o) const {
    const PosVal& pv = static_cast<const PosVal&>(c);
    int pos=pv.pos, val=pv.val;
    if (a == 0)
      o << "x[" << pos << "] = " << val;
    else
      o << "x[" << pos << "] != " << val;
  }
  \end{litblock}
  \begin{litblock}{no-good literal creation}
  virtual NGL* ngl(Space& home, const Choice& c,
                   unsigned int a) const {
    const PosVal& pv = static_cast<const PosVal&>(c);
    int pos=pv.pos, val=pv.val;
    if (a == 0)
      return new (home) EqNGL(home, x[pos], val);
    else
      return NULL;
  }
  \end{litblock}
};
\begin{litblock}{anonymous}
void nonemin(Home home, const IntVarArgs& x) {
  if (home.failed()) return;
  ViewArray<Int::IntView> y(home,x);
  NoneMin::post(home,y);
}
\end{litblock}
\end{litcode}
