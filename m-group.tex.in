% -*- mode: LaTeX; -*- 
\chapter{Groups and tracing}
\label{chap:m:group}

Groups are a means to control certain execution aspects of
propagators and branchers. Tracing can be used for tracing
constraint propagation during execution. Groups are ultimately
linked to tracing, as the generated traces can be filtered
according to group membership.

\paragraph{Overview.}

\mbox{}\autoref{sec:m:group:prop} explains groups of propagators,
whereas \autoref{sec:m:group:branch} explains groups of
branchers. The tracing support that comes with Gecode is
explained in \autoref{sec:m:group:trace} and
\autoref{sec:m:group:tracers} shows how tracers (the objects that
process trace information) can be defined.

\section{Propagator groups}
\label{sec:m:group:prop}

Each propagator belongs to exactly one \emph{propagator group} of
type \gecoderef[class]{PropagatorGroup}. When a propagator is
created, it is conceptually added to a group. Group membership of
a propagator remains stable during copying of spaces.

\paragraph{Adding propagators to groups.}

The following code fragment creates a propagator group \?pg?:
\begin{code}
PropagatorGroup pg;
\end{code}
A propagator can be added to the group \?pg? by passing the group
as additional information adjoined to the \?home? information when
the propagator is posted. For example when assuming that \?home?
refers to a space, then
\begin{code}
distinct(home(pg), x);
\end{code}
adds all propagators created by the constraint post function
\?distinct()? to the propagator group \?pg?. Equivalently, one
can also use:
\begin{code}
distinct(pg(home), x);
\end{code}

If no propagator group is specified when a propagator is created,
then the propagator is added to the default propagator group
\?PropagatorGroup::def?. 

\paragraph{Moving propagators between groups.}

Propagators can be moved from one group into another. For
example, if \?pga? and \?pgb? are propagator groups, then
\begin{code}
pga.move(home,pgb);
\end{code}
moves all propagators from group \?pgb? into group \?pga?. An
individual propagator \?p? (of type \?Propagator&?) can also be
moved into a propagator group \?pg? by
\begin{code}
pg.move(home,p);
\end{code}
Individual propagators can also be moved by giving their id. For
example, the following is equivalent to the previous example:
\begin{code}
unsigned int id = p.id();
pg.move(home,id);
\end{code}
If no propagator with a given id exists, an exception of type
\gecoderef[class]{UnknownPropagator} is thrown.

In order to remove a propagator from its group or all propagators
of a group from their group, one can use the default group. For
example, if \?pg? is a propagator group, all of its propagators
are removed from \?pg? by
\begin{code}
PropagatorGroup::def.move(home,pg);
\end{code}

Move operations can be concatenated as they return its group. For
example, if \?pg? is a propagator group and \?p1? and \?p2? are
two propagators, then
\begin{code}
pg.move(p1).move(p2);
\end{code}
removes both \?p1? and \?p2? from \?pg?.

\paragraph{Operations on propagator groups.}

The number of propagators in a group can be computed by the
\?size()? member function. The following expression:
\begin{code}
pg.size(home);
\end{code}
evaluates to the number of propagators in the group \?pg?. Each
group has a unique identifier of type \?unsigned int? which can
be accessed by:
\begin{code}
pg.id();
\end{code}

One can iterate over all propagators in a group. For example
\begin{code}
for (Propagators p(home,pg); p() ++p)
  std::cout << p.propagator.id() << std::endl;
\end{code}
prints the unique identifier of each propagator contained in
group \?pg?. Note that a propagator also provides access to the
group it belongs to, assume that \?p? is of type \?Propagator&?,
then
\begin{code}
p.group();
\end{code}
evaluates to the group \?p? belongs to.

The propagators of a group can be disabled and enabled. By
\begin{code}
pg.disable(home);
\end{code}
all propagators in \?pg? are disabled in that they are not any
longer performing any propagation (for more details on disabling
and enabling propagators, see also
\autoref{par:p:started:disable}). Similarly, propagators can be
enabled by
\begin{code}
pg.enable(home);
\end{code}
By default, enabling a disabled propagator will schedule the
propagator for execution if necessary. Hence, next time the
\?status()? function of the propagator's home space is executed,
the propagator will be executed again. It is also possible to
enable propagators in a group without scheduling them by:
\begin{code}
pg.enable(home,false);
\end{code}

All propagators in a group can be killed by
\begin{code}
pg.kill(home);
\end{code}

For convenience, there is one special propagator group
\?PropagatorGroup::all? which refers to all propagators in a
space (one can think of it as the union of all propagator
groups). For example,
\begin{code}
PropagatorGroup::all.size(home);
\end{code}
evaluates to the number of all propagators in the space \?home?.


\section{Brancher groups}
\label{sec:m:group:branch}

Brancher groups contain branchers and each brancher belongs to
exactly one brancher group of type
\gecoderef[class]{BrancherGroup}. Brancher groups are very
similar to propagator groups as described in the previous
section:
\begin{itemize}
\item A brancher group \?bg? is created as follows:
\begin{smallcode}
BrancherGroup bg;
\end{smallcode}
\item  A brancher is added to the group \?bg? by passing the group
as additional information adjoined to the \?home? information when
the propagator is posted. For example, the brancher created by
\begin{smallcode}
branch(home(bg), x, INT_VAR_NONE(), INT_VAL_MIN());
\end{smallcode}
adds the newly created brancher created to the brancher group \?bg?. Equivalently, one
can also write \?bg(home)? instead of \?home(bg)?.
\item Brancher groups provide \?move()? functions for
  moving branchers into brancher groups that are analogous to the
  \?move()? functions for propagator groups.
\item
If no brancher group is specified,
then the brancher is added to the default group
\?BrancherGroup::def?. 
\item The number of branchers in a group can be computed by the
\?size()? member function. Each
group has a unique identifier of type \?unsigned int? which can
be accessed by \?bg.id()?.
\item One can iterate over all branchers in a group by using the
  iterator class \gecoderef[class]{Branchers}.
\item Each brancher provides access to the
group it belongs to, assume that \?b? is of type \?Brancher&?,
then 
\begin{smallcode}
b.group();
\end{smallcode}
evaluates to the group \?b? belongs to.
\item 
All branchers in a group can be killed by
\begin{smallcode}
bg.kill(home);
\end{smallcode}
\item There is one special brancher group
\?BrancherGroup::all? which refers to all branchers in a space.
\end{itemize}

\section{Tracing}
\label{sec:m:group:trace}

Gecode offers support to trace constraint propagation on an array
of variables. Tracing distinguishes between two components: a
\emph{trace recorder} that records information about relevant
events during constraint propagation and a \emph{tracer} that
processes the recorded trace information. A very simple tracer
instance would just print some textual information about
recorded trace events. In fact, Gecode offers default tracers for
each variable type that comes with Gecode that just print to an
output stream of type \?std::ostream?.

\subsection{Creating a trace recorder}

A trace recorder can be created by calling the overloaded
function \?trace()? together with an array of variables. For
example,
\begin{code}
trace(home, x);
\end{code}
creates a trace recorder for an array of variables \?x?. Here,
\?x? can be an array of integer, Boolean, set, or float
variables.

The trace recorder records the following events:
\begin{itemize}
\item A single \emph{init-event} providing some information about
  the variables for which the trace recorder will record
  information.
\item A \emph{prune-event} is recorded, each time the domain of a
  variable is changed. The trace recorder provides information
  about which variable has been changed how and on behalf of
  which entity (a propagator, a brancher, or a constraint post
  function performing pruning outside any propagator or
  brancher).
\item A \emph{fixpoint-event} is recorded when the space
  containing the trace recorder reaches a fixpoint, triggered by the
  execution of the space's \?status()? function.
\item A \emph{done-event} that is recorded when all of the trace
  recorder's variables have been assigned and hence no further
  recording is needed. Note that this event can occur only once
  per space, however when using tracing during search the event
  might occur several times for different spaces.
\end{itemize}

The information that is recorded for each event depends on the
trace recorder's variable type.
 
\subsection{Default tracers}

The following paragraphs explain the information shown by the
default tracer for a given variable type.

\paragraph{Integer and Boolean variables.}

\begin{figure}
\begin{cmd}
SEND+MORE=MONEY
trace<Int>::init(id:0) slack: 100.00% (72 values)
trace<Int>::prune(id:0): [0] = [1..9] - {0} by post()
trace<Int>::prune(id:0): [4] = [1..9] - {0} by post()
trace<Int>::prune(id:0): [0] = 9 - {1..8} by propagator(id:2)
  ...
trace<Int>::fix(id:0) slack: 33.33% - 66.67%
  ...
trace<Int>::done(id:0) slack: 0%
        {9, 5, 6, 7, 1, 0, 8, 2}
trace<Int>::prune(id:0): [1] = [6..7] - {5} by brancher(id:1)
  ...
\end{cmd}
\caption{Abridged output for tracing Send More Money}
\label{fig:m:group:smm}
\end{figure}

When running the example \gecoderef[example]{money} (see
\autoref{chap:m:started} and \autoref{chap:m:comfy} for the Send
More Money problem) with the
commandline option \?-trace all? (trace events to be recorded
can be specified on the command line, see
\autoref{sec:m:driver:options}), the default tracer for integer
will print information about all trace events to \?std::cerr?. An
excerpt of the information printed is shown in
\autoref{fig:m:group:smm} where the trace recorder has been
posted with
\begin{code}
trace(home, le);
\end{code}
where \?le? is the array of eight variables.

The output for each event starts with the information
\begin{cmd}
trace<Int>::
\end{code}
signaling that integer variables are being traced. After that,
the type of event is shown (\?init?, \?prune?, \?fix? for fixpoint, or
\?done?). This is followed by information about the identifier of the
trace recorder (a trace recorder is in fact a propagator and
hence has a unique identifier, see
\autoref{sec:m:group:traceonoff}). If the trace recorder
belongs to a propagator group different from the default
propagator group, also the identifier of the propagator group is
printed.

The information for each event type is as follows:
\begin{itemize}
\item For an init-event, the total slack of all variables is
  shown where the slack of a variable is the number of values
  that must be removed before the variable gets assigned to a
  single value. This information serves as a measure of how much
  propagation is still to be done.
\item For a prune-event, it is printed which variable has been
  pruned where the variable is identified by its position in the
  variable array of the trace recorder (for example, the first
  prune event in \autoref{fig:m:group:smm} shows \?[0]? as the
  variable at position~\?0? has been pruned).

  Next, the current domain of the variable is printed (that is,
  \?[1..9]?) and that the value \?0? has been pruned (that is,
  \?- {0}?).

  This is followed by information which entity has pruned the variable: a
  constraint post function (as is the case for the first two
  prune-events in \autoref{fig:m:group:smm}), a propagator (as is
  the case for the third prune-event in
  \autoref{fig:m:group:smm}), a brancher (as is the case for the
  last prune-event in \autoref{fig:m:group:smm}), or unknown. In
  case the prune-event has been caused by a propagator or
  brancher, their identifiers are shown. In case the propagator
  or brancher belongs to a group different from the respective
  default group, also the group's identifier is shown. This is
  also true if the event has been caused by a constraint post
  function where some group information had been passed to the
  constraint post function.
\item For a fixpoint-event, the current slack and its change
  since the last fixpoint are shown.
\item For a done-event, the current slack is shown
  (unsurprisingly, the slack is $0\%$ as all variables have been
  assigned).
\end{itemize}

The information printed by the default tracer for Boolean
variables is exactly the same as for integer variables.

Defining custom tracers is straightforward, this is explained in
\autoref{sec:m:group:tracers}.

\paragraph{Set variables.}

The information printed for init-, fixpoint-, and done-events for
set variables, is analogous to the information for integer
variables. The slack of a set variable here is defined as the
number of values that can be still included or excluded from the
set variable (that is, it corresponds to \?x.unknownSize()? where
is \?x? is a set variable of type \gecoderef[class]{SetVar}).

For a prune-event, it is shown which values have been included in
the set and which values have been excluded from the set. For
example in
\begin{code}
trace<Set>::prune(id:0): [0] = {1..6} + {6..6} - {} by brancher(id:1)
\end{code}
the value \?6? has been included into the set variable and no value
has been excluded whereas in
\begin{code}
trace<Set>::prune(id:0): [1] = {1..3} + {} - {4..6} by propagator(id:1)
\end{code}
the values \?3?, \?4?, \?5?, and \?6? have been excluded. You can
try the \gecoderef[example]{hamming} example that supports tracing.

\paragraph{Float variables.}

For float variables, the slack is defined as the width of the
variable domain. The information printed for the events is
analogous to the information for integer variables, where for a
prune-event the interval containing the pruned values is printed.

For an example that supports tracing for float variable, you
might try \gecoderef[example]{descartes-folium} example.

\subsection{Using trace filters}

The amount of prune-events that are generated during tracing can
be prohibitive and often one is only interested in events
generated by a subset of the propagators, branchers, or post
functions. Therefore, one can pass as an optional argument a
\emph{trace filter} of type \gecoderef[class]{TraceFilter}
defined by a \emph{trace filter expression} (or \emph{TFE}) of type
\gecoderef[class]{TFE} to a trace recorder.

Assume that \?pga? and \?pgb? are two propagator groups and
\?bg? is a brancher group. Then
\begin{code}
trace(home, x, pga);
\end{code}
will trace only prune-events that have been caused by a
propagator or a post function associated with the group
\?pga?. Prune-events caused by propagators or post functions from
\?pga? and \?pgb? will be traced by
\begin{code}
trace(home, x, pga+pgb);
\end{code}
Likewise, prune-events caused by branchers in the group \?bg? or
by propagators or post functions not associated to \?pga? will be
traced by
\begin{code}
trace(home, x, bg-pga);
\end{code}
The following will only trace post functions associated to group
\?pga? and propagators included in \?pgb?:
\begin{code}
trace(home, x, post(pga)+propagator(pgb));
\end{code}

In summary, trace filter expressions can be constructed from the
unary and binary operators~\?+? and~\?-? and the functions
\?post()? and \?propagator()? taking a propagator group as
argument.

\subsection{Selecting the events to trace}

When creating a trace recorder, it can be defined which events
should be recorded by providing an additional argument. For
example
\begin{code}
trace(home, x, TE_PRUNE);
\end{code}
will only record prune-events, whereas
\begin{code}
trace(home, x, TE_PRUNE | TE_FIX);
\end{code}
will record prune- and fixpoint-events. All events (the default)
are recorded by
\begin{code}
trace(home, x, TE_INIT | TE_PRUNE | TE_FIX | TE_DONE);
\end{code}


\subsection{Enabling and disabling trace recorders}
\label{sec:m:group:traceonoff}

A trace recorder is implemented by a propagator, hence the trace
recorder can be controlled by propagator groups. In particular, a
trace recorder can be disabled and enabled.

For example, by creating a propagator group~\?t? by
\begin{code}
PropagatorGroup t;
\end{code}
and then creating a trace recorder so that it belongs to the
group~\?t? by
\begin{code}
trace(home(t), x);
\end{code}
the trace recorder can be controlled through the group~\?t? it
belongs to.

For example, the trace recorder can be disabled by
\begin{code}
t.disable(home);
\end{code}
and the later enabled by
\begin{code}
t.enable(home);
\end{code}
Of courses, one can easily add several trace recorders (either
for different variables or different variable types) to the same
propagator group and hence jointly control all trace recorders in
that group.

\section{Programming tracers}
\label{sec:m:group:tracers}

Defining own tracers is quite straightforward, by inheriting from
a class that depends on the
variable type and implements one virtual member function for each
event type. These virtual member functions are called when an
event of that type is being recorded and the event type has been
selected for tracing. For integer variables, the tracer class to
inherit from is \gecoderef[typedef]{IntTracer}, for Boolean
variables \gecoderef[typedef]{BoolTracer}, for set variables
\gecoderef[typedef]{SetTracer}, and for float variables
\gecoderef[typedef]{FloatTracer}. All classes are in fact type
definitions instantiating the class \gecoderef[class]{Tracer}.

In the following we are going to discuss tracers for integer and
Boolean variables in some detail in
\autoref{sec:m:group:tracers:int} and summarize tracers for set
and float variables in \autoref{sec:m:group:tracers:set} and
\autoref{sec:m:group:tracers:float} respectively.

\subsection{Tracers for integer and Boolean variables}
\label{sec:m:group:tracers:int}


\begin{figure}
\insertlitcode{integer tracer}
\caption{An integer tracer printing to \?std::cout?}
\label{fig:m:group:tracer}
\end{figure}


\insertlitcode{integer tracer:print propagator information}

\insertlitcode{integer tracer:print execution information}

\insertlitcode{integer tracer:prune event}

\insertlitcode{integer tracer:fixpoint event}

List the types.

Easy.

Memory model.

Concurrency model: atomic processing of events.


\subsection{Tracers for set variables}
\label{sec:m:group:tracers:set}

\subsection{Tracers for float variables}
\label{sec:m:group:tracers:float}


\begin{litcode}{integer tracer}{schulte}
\begin{litblock}{anonymous}
#include <gecode/int.hh>
#include <iomanip>

using namespace Gecode;

\end{litblock}
class StdCoutIntTracer : public IntTracer {
protected:
  \begin{litblock}{print propagator information}
  static void ids(const Propagator& p) {
    std::cout << "(id:" << p.id();
    if (p.group().in())
      std::cout << ",g:" << p.group().id();
    std::cout << ')';
  }
  \end{litblock}
  static void ids(const Brancher& b) {
    \begin{litblock}{anonymous}
    std::cout << "(id:" << b.id();
    if (b.group().in())
      std::cout << ",g:" << b.group().id();
    std::cout << ')';
    \end{litblock}
  }
  \begin{litblock}{print execution information}
  static void info(const ExecInfo& ei) {
    switch (ei.what()) {
    case ExecInfo::PROPAGATOR:
      std::cout << "propagator"; ids(ei.propagator());
      break;
    case ExecInfo::BRANCHER:
      std::cout << "brancher"; ids(ei.brancher());
      break;
    case ExecInfo::POST:
      std::cout << "post(";
      if (ei.post().in())
        std::cout << "g:" << ei.post().id();
      std::cout << ')';
      break;
    case ExecInfo::OTHER:
      std::cout << '-';
      break;
    }
  }
  \end{litblock}
public:
  virtual void init(const Space& home, const IntTraceRecorder& t) {
    \begin{litblock}{anonymous}
    std::cout << "trace::init"; ids(t);
    std::cout << " slack: 100.00% (" << t.slack().initial() << " values)"
              << std::endl;
    \end{litblock}
  }
  \begin{litblock}{prune event}
  virtual void prune(const Space& home, const IntTraceRecorder& t,
                     const ExecInfo& ei, int i, IntTraceDelta& d) {
    std::cout << "trace::prune"; ids(t);
    std::cout << ": [" << i << "] = " << t[i] << " - {";
    std::cout << d.min();
    if (d.width() > 1)
      std::cout << ".." << d.max();
    ++d;
    while (d()) {
      \begin{litblock}{anonymous}
      std::cout << ',' << d.min();
      if (d.width() > 1)
        std::cout << ".." << d.max();
      ++d;
      \end{litblock}
    }
    std::cout << "} by "; info(ei);
    std::cout << std::endl;
  }
  \end{litblock}
  \begin{litblock}{fixpoint event}
  virtual void fix(const Space& home, const IntTraceRecorder& t) {
    std::cout << "trace::fix"; ids(t);
    double sl_i = static_cast<double>(t.slack().initial());
    double sl_p = static_cast<double>(t.slack().previous());
    double sl_c = static_cast<double>(t.slack().current());
    \begin{litblock}{anonymous}
    double p_c = 100.0 * (sl_c / sl_i);
    double p_d = 100.0 * (sl_p / sl_i) - p_c;
    std::cout << " slack: "
              << std::showpoint << std::setprecision(4)
              << p_c << "% - "
              << std::showpoint << std::setprecision(4)
              << p_d << '%'
              << std::endl;
    \end{litblock}
  }
  \end{litblock}
  virtual void done(const Space& home, const IntTraceRecorder& t) {
    \begin{litblock}{anonymous}
    std::cout << "trace::done"; ids(t);
    if (t.group().in())
      std::cout << ",g:" << t.group().id();
    std::cout << ") slack: 0%" << std::endl;
    \end{litblock}
  }
};
\end{litcode}


